{"version":3,"sources":["components/card/card.jsx","components/card-list/card-list.jsx","components/search-box/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","e","i","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","setState","catch","console","log","this","filteredMonsters","filter","m","toLowerCase","includes","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iTAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BAAoEC,IAAI,YAChF,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCFbC,EAAW,SAACR,GAAD,OAAS,qBAAKC,UAAU,YAAf,SAEjBD,EAAMS,SAASC,KAAI,SAACC,EAAGC,GAAJ,OACf,cAAC,EAAD,CAAiBT,QAASQ,GAAfA,EAAEP,UCLpBS,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAQ,uBAAOd,UAAU,SAASe,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC6CzEG,E,kDA1CX,WAAYlB,GAAQ,IAAD,8BACf,cAAMA,IACDmB,MAAQ,CACTV,SAAU,GACVW,YAAa,IAJF,E,qDAQnB,WAAqB,IAAD,OAChBC,MAAM,+CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAI,EAAKC,SAAS,CAAChB,SAAUe,OACtCE,OAAM,SAAAf,GAAC,OAAIgB,QAAQC,IAAR,+BAAoCjB,S,oBAGxD,WAAU,IAAD,SAC2BkB,KAAKV,MAA9BV,EADF,EACEA,SAAUW,EADZ,EACYA,YACjBO,QAAQC,IAAIC,KAAKV,MAAMV,UAEvB,IAAMqB,EAAmBrB,EAASsB,QAAO,SAAAC,GACxC,OAAOA,EAAE1B,KAAK2B,cAAcC,SAASd,EAAYa,kBAGlD,OACI,sBAAKhC,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CAAWa,YAAY,iBAAiBC,aAAc,SAACJ,GACnD,EAAKc,SAAS,CAACL,YAAaT,EAAEwB,OAAOC,WAGzC,cAAC,EAAD,CAAU3B,SAAUqB,W,GAhClBO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4c71454f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.css\";\n\nexport const Card = (props)=> (\n    <div className=\"card-container\">\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"monster\"/>\n        <h2>{props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n);","import React from \"react\";\nimport \"./card-list.css\";\nimport {Card} from \"../card/card\";\n\n\nexport const CardList = (props)=><div className=\"card-list\">\n        {\n                props.monsters.map((e, i) =>\n                    <Card key={e.id} monster={e}/>\n                )\n        }\n        </div>","import React from \"react\";\nimport \"./search-box.css\"\n\nexport const SearchBox = ({placeholder, handleChange}) => {\n    return (<input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange}/>);\n}","import './App.css';\nimport {CardList} from \"./components/card-list/card-list\";\nimport {Component} from \"react\";\nimport {SearchBox} from \"./components/search-box/search-box\";\n\nclass App extends Component{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            monsters: [],\n            searchField: \"\"\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users/')\n            .then(response => response.json())\n            .then(json => this.setState({monsters: json}))\n            .catch(e => console.log(`Error getting users: ${e}`));\n    }\n\n    render() {\n        const {monsters, searchField} = this.state;\n        console.log(this.state.monsters);\n\n        const filteredMonsters = monsters.filter(m => {\n         return m.name.toLowerCase().includes(searchField.toLowerCase());\n        });\n\n        return (\n            <div className=\"App\">\n                <h1>Monsters Rolodex</h1>\n                <SearchBox placeholder=\"Select monster\" handleChange={(e)=>{\n                    this.setState({searchField: e.target.value});\n                }}/>\n\n                <CardList monsters={filteredMonsters}  />\n\n\n\n            </div>\n        );\n    }\n\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}